$totalCards: 13;
$cardSpacingX: 10%;
$cardSpacingY: $cardSpacingX * $cardWidthToHeight;
$selfCardSpacing: 33%; // Of card widths

$cardHeight: 0.2 * $screenHeight;
$cardWidth: $cardHeight * $cardWidthToHeight;


@mixin selfCardTransform($i, $total, $y: 0px) {
	$left: 0.4;
	$top: 0.74;

	$horiz: ($i + ($totalCards - 1 - $total) / 2)* $selfCardSpacing;
	$half: $total/2;

	$vertical: 0.8px * (($i - $half) * ($i - $half) - $half * $half) + $y;

	@include transform(translate($left * $screenWidth, $top * $screenHeight) translateX($horiz) rotate(($i - $half) * 2deg) translateY($vertical));
}

@include keyframes(self-played) {
	to {
		@include transform(translate($screenWidth * 0.44, $screenHeight * 0.49) rotate(15deg));
	}
}
@include keyframes(left-played) {
	to {
		@include transform(translate($screenWidth * 0.35, $screenHeight * 0.4) rotate(-85deg));
	}
}
@include keyframes(across-played) {
	to {
		@include transform(translate($screenWidth * 0.45, $screenHeight * 0.28) rotate(15deg));
	}
}
@include keyframes(right-played) {
	to {
		@include transform(translate($screenWidth * 0.55, $screenHeight * 0.4) rotate(85deg));
	}
}

#board {
	$cardPlayDuration: 0.7s;

	@include full-screen();

	.player {
		@include full-screen();

		.card {
			height: $cardHeight;
			width: $cardWidth;

			&.played {
				@include animation-fill-mode(forwards);
				@include animation-duration($cardPlayDuration);
				@include animation-timing-function(ease-out);
			}
		}

		.hand, .outer {
			@include full-screen();
		}

		.card.inHand {
			@include single-transition(transform, 0.2s, ease-out);
		}

		.hand {
			z-index: 1;

			&.firstToGo {
				z-index: 1;
			}
			&.secondToGo {
				z-index: 2;
			}
			&.thirdToGo {
				z-index: 3;
			}
			&.fourthToGo {
				z-index: 4;
			}
		}

		&.self {
			.hand.waitingToPlay {
				// Always override the hand z-index if we haven't played yet
				z-index: 5;
			}

			position: relative;

			.card {
				&.played {
					@include animation-name(self-played);
				}
			}

			// This loop has to be in decreasing order. When a lower .hand{#} is
			// applied, it has to override the higher one.
			//@for $totalIncrease from 0 to $totalCards {
			@for $totalIncrease from 0 to $totalCards {
				$total: $totalCards - $totalIncrease;
				.hand#{$total} {
					@for $iIncrease from 1 through $total {
						$i: $total - $iIncrease;
						.card#{$i} .card {
							$maxTotal: $total - 1;

							z-index: $i + 1;

							@include selfCardTransform($i, $maxTotal);

							&.selectable:hover {
								@include selfCardTransform($i, $maxTotal, -10px);
							}

							&.selected, &.played {
								// Played starts from here too
								@include selfCardTransform($i, $maxTotal, -20px);
							}
						}
					}
				}
			}
		}

		&.across {
			position: relative;

			.card {
				&.played {
					@include animation-name(across-played);
				}
			}

			@for $totalIncrease from 0 to $totalCards {
				$total: $totalCards - $totalIncrease;
				.hand#{$total} {
					@for $iIncrease from 1 through $total {
						$i: $total - $iIncrease;
						.card#{$i} .card {
							$maxTotal: $total - 1;

							z-index: $maxTotal - $i;

							$horiz: ($i + ($totalCards - 1 - $maxTotal) / 2)* $cardSpacingX;
							$half: $maxTotal/2;
							$vert: 0.6px * ($half * $half - ($i - $half) * ($i - $half));
							@include transform(translate(0.4 * $screenWidth, 0.03 * $screenHeight) translateX($horiz) rotate(($half - $i) * 4deg) translateY($vert));
						}
					}
				}
			}
		}

		&.left {
			position: relative;

			.card {
				&.played {
					@include animation-name(left-played);
				}
			}

			@for $totalIncrease from 0 to $totalCards {
				$total: $totalCards - $totalIncrease;
				.hand#{$total} {
					@for $iIncrease from 1 through $total {
						$i: $total - $iIncrease;
						.card#{$i} .card {
							$maxTotal: $total - 1;

							z-index: $i;

							$vert: ($i + ($totalCards - 1 - $maxTotal) / 2) * $cardSpacingY;
							$half: $maxTotal/2;

							@include transform(translate(0.04 * $screenWidth, 0.3 * $screenHeight) translateY($vert) rotate(-90deg - ($half - $i) * 4deg) translateY(0.8px * ($half * $half - ($i - $half) * ($i - $half))));
						}
					}
				}
			}
		}

		&.right {
			position: relative;

			.card {

				&.played {
					@include animation-name(right-played);
				}
			}

			@for $totalIncrease from 0 to $totalCards {
				$total: $totalCards - $totalIncrease;
				.hand#{$total} {
					@for $iIncrease from 1 through $total {
						$i: $total - $iIncrease;
						.card#{$i} .card {
							$maxTotal: $total - 1;

							z-index: $maxTotal - $i;

							$vert: ($i + ($totalCards - 1 - $maxTotal) / 2) * $cardSpacingY;
							$half: $maxTotal/2;

							@include transform(translate(0.8 * $screenWidth, 0.1 * $screenHeight) translateY($vert) rotate(90deg + ($half - $i) * 4deg) translateY(0.8px * ($half * $half - ($i - $half) * ($i - $half))));
						}
					}
				}
			}
		}
	}
}

#passing {
	position: relative;
	z-index: 6;
	width: 300px;
	height: 300px;
}
